name: Release to PyPI

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - '.gitignore'
      - '.dockerignore'
      - '.env.example'
      - '.pypirc.example'
      - 'Makefile'
      - 'pytest.ini'
      - 'requirements.txt'
      - '*.md'
      - '.editorconfig'
      - '.vscode/**'
      - '.idea/**'

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if version changed
        id: version_check
        run: |
          git fetch origin master
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          PREVIOUS_VERSION=$(git show HEAD~1:pyproject.toml | grep '^version = ' | sed 's/version = "\(.*\)"/\1/')
          
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️  Version unchanged - skipping release"
          fi

  release:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    environment:
      name: pypi
      url: https://pypi.org/project/diagram-ai-generator/
    permissions:
      contents: write
      id-token: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build
          echo "✅ Package built successfully"

      - name: Check package
        run: |
          twine check dist/*
          echo "✅ Package validation passed"

      - name: Check if version exists on PyPI
        id: check_pypi
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"
          
          # Check if version exists on PyPI
          if pip index versions diagram-ai-generator | grep -q "Available versions: .*$VERSION"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Version $VERSION already exists on PyPI"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $VERSION is new"
          fi

      - name: Publish to PyPI
        if: steps.check_pypi.outputs.exists == 'false'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*
          echo "✅ Published to PyPI"
      
      - name: Skip publishing
        if: steps.check_pypi.outputs.exists == 'true'
        run: |
          echo "ℹ️  Version ${{ needs.check-version.outputs.new_version }} already exists on PyPI - skipping upload"
          echo "This is normal if the version was published manually"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          name: Release v${{ needs.check-version.outputs.new_version }}
          body: |
            ## 🚀 Version ${{ needs.check-version.outputs.new_version }}
            
            ### Installation
            ```bash
            pip install --upgrade diagram-ai-generator
            ```
            
            ### PyPI
            https://pypi.org/project/diagram-ai-generator/${{ needs.check-version.outputs.new_version }}/
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Update CHANGELOG
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          REPO="${{ github.repository }}"
          
          # Get the previous version tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Get commits since last tag
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%h|%s|%an" --no-merges)
          else
            COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"%h|%s|%an" --no-merges)
          fi
          
          # Initialize categories
          ADDED=""
          CHANGED=""
          FIXED=""
          REMOVED=""
          BREAKING=""
          OTHER=""
          
          # Categorize commits
          while IFS='|' read -r hash message author; do
            # Create commit link
            COMMIT_LINK="[\`${hash}\`](https://github.com/${REPO}/commit/${hash})"
            
            # Extract PR number if exists
            PR_NUM=$(echo "$message" | grep -oE '\(#[0-9]+\)' | head -1)
            if [ -n "$PR_NUM" ]; then
              PR_LINK=" ${PR_NUM/\(#/([#}${PR_NUM/\)/](https://github.com/${REPO}/pull/${PR_NUM//[()#]/})}"
              message=$(echo "$message" | sed "s/${PR_NUM}//g")
            else
              PR_LINK=""
            fi
            
            # Clean message
            message=$(echo "$message" | sed 's/^feat: //i; s/^fix: //i; s/^chore: //i; s/^docs: //i; s/^refactor: //i; s/^style: //i; s/^test: //i; s/^perf: //i')
            
            # Categorize
            if echo "$message" | grep -qiE '^BREAKING CHANGE:'; then
              BREAKING="${BREAKING}- ${message} ${COMMIT_LINK}${PR_LINK}\n"
            elif echo "$hash" | xargs git log -1 --format=%B | grep -qiE '^feat'; then
              ADDED="${ADDED}- ${message} ${COMMIT_LINK}${PR_LINK}\n"
            elif echo "$hash" | xargs git log -1 --format=%B | grep -qiE '^fix'; then
              FIXED="${FIXED}- ${message} ${COMMIT_LINK}${PR_LINK}\n"
            elif echo "$hash" | xargs git log -1 --format=%B | grep -qiE '^(remove|delete)'; then
              REMOVED="${REMOVED}- ${message} ${COMMIT_LINK}${PR_LINK}\n"
            elif echo "$hash" | xargs git log -1 --format=%B | grep -qiE '^(chore|refactor|perf|style)'; then
              CHANGED="${CHANGED}- ${message} ${COMMIT_LINK}${PR_LINK}\n"
            else
              OTHER="${OTHER}- ${message} ${COMMIT_LINK}${PR_LINK}\n"
            fi
          done <<< "$COMMITS"
          
          # Build changelog entry
          cat > changelog_entry.md << EOF
          ## [$VERSION] - $DATE
          
          EOF
          
          [ -n "$BREAKING" ] && echo -e "### ⚠️ BREAKING CHANGES\n${BREAKING}" >> changelog_entry.md
          [ -n "$ADDED" ] && echo -e "### ✨ Added\n${ADDED}" >> changelog_entry.md
          [ -n "$CHANGED" ] && echo -e "### 🔧 Changed\n${CHANGED}" >> changelog_entry.md
          [ -n "$FIXED" ] && echo -e "### 🐛 Fixed\n${FIXED}" >> changelog_entry.md
          [ -n "$REMOVED" ] && echo -e "### 🗑️ Removed\n${REMOVED}" >> changelog_entry.md
          [ -n "$OTHER" ] && echo -e "### 📝 Other\n${OTHER}" >> changelog_entry.md
          
          # Prepend to CHANGELOG.md (after header)
          if [ -f CHANGELOG.md ]; then
            # Find where to insert (after "All notable changes..." section)
            head -n 4 CHANGELOG.md > temp_changelog.md
            cat changelog_entry.md >> temp_changelog.md
            echo "" >> temp_changelog.md
            tail -n +5 CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          fi

      - name: Commit CHANGELOG
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG for v${{ needs.check-version.outputs.new_version }}" || echo "No changes to commit"
          git push || echo "No changes to push"

