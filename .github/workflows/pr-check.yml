name: PR Checks

on:
  pull_request:
    branches:
      - master
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  analyze-changes:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      needs_release: ${{ steps.check.outputs.needs_release }}
      change_type: ${{ steps.check.outputs.change_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check what changed
        id: check
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/master...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Files that don't trigger releases (must match release.yml paths-ignore)
          IGNORE_PATTERN='^(README\.md|docs/|\.github/|CHANGELOG\.md|LICENSE|\.gitignore|\.dockerignore|\.env\.example|\.pypirc\.example|Makefile|pytest\.ini|requirements\.txt|.*\.md|\.editorconfig|\.vscode/|\.idea/|\.DS_Store)'
          
          # Check if only non-code files changed
          if echo "$CHANGED_FILES" | grep -qvE "$IGNORE_PATTERN"; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "change_type=code" >> $GITHUB_OUTPUT
            echo "üì¶ Code changes detected - Release will be created"
          else
            echo "needs_release=false" >> $GITHUB_OUTPUT
            echo "change_type=docs" >> $GITHUB_OUTPUT
            echo "üìù Only documentation/config changes - No release needed"
          fi

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const needsRelease = '${{ steps.check.outputs.needs_release }}' === 'true';
            const changeType = '${{ steps.check.outputs.change_type }}';
            
            let message = '## üîç PR Analysis\n\n';
            
            if (needsRelease) {
              message += '‚úÖ **Release will be created** when merged to master\n\n';
              message += 'üì¶ Code changes detected that require a new version.\n';
            } else {
              message += 'üìù **No release needed** - Documentation only\n\n';
              message += 'Only documentation files were changed.\n';
            }
            
            message += '\n---\n';
            message += 'Make sure your commit follows [Conventional Commits](https://www.conventionalcommits.org/):\n';
            message += '- `feat:` - New feature (minor version bump)\n';
            message += '- `fix:` - Bug fix (patch version bump)\n';
            message += '- `BREAKING CHANGE:` - Breaking change (major version bump)\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.needs_release == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -e ".[test]"

      - name: Verify project structure
        run: |
          echo "Checking required files..."
          test -f pyproject.toml || (echo "‚ùå pyproject.toml not found" && exit 1)
          test -f README.md || (echo "‚ùå README.md not found" && exit 1)
          test -f LICENSE || (echo "‚ùå LICENSE not found" && exit 1)
          test -d src || (echo "‚ùå src directory not found" && exit 1)
          test -d tests || (echo "‚ùå tests directory not found" && exit 1)
          echo "‚úÖ All required files present"

      - name: Run unit tests
        run: |
          pytest tests/unit -v --cov=src --cov-report=term-missing
          echo "‚úÖ Unit tests passed"

      - name: Run integration tests
        run: |
          pytest tests/integration -v
          echo "‚úÖ Integration tests passed"

      - name: Build package
        run: |
          python -m build
          echo "‚úÖ Package built successfully"

      - name: Check package
        run: |
          twine check dist/*
          echo "‚úÖ Package validation passed"

      - name: Test import
        run: |
          pip install dist/*.whl --force-reinstall
          python -c "from src.application.services.diagram_service import DiagramService; print('‚úÖ Import successful')"
          python -c "from src.infrastructure.adapters.filesystem_storage import FilesystemDiagramStorage; print('‚úÖ Storage adapter import successful')"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  lint-commits:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          echo "Checking commit message format..."
          git log --format=%s origin/master..HEAD | while read msg; do
            if echo "$msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf)(\(.+\))?:|^BREAKING CHANGE:|^Merge'; then
              echo "‚úÖ $msg"
            else
              echo "‚ö†Ô∏è  Non-conventional commit: $msg"
              echo "   Consider using: feat|fix|docs|style|refactor|test|chore|perf"
            fi
          done

